
/// Slightly lighten a color
/// @access public
/// @param {Color} $color - color to tint
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}
///
@function tint($color, $percentage) {
  @return mix($color, white, $percentage);
}

/// Slightly darken a color
/// @access public
/// @param {Color} $color - color to shade
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}
///
@function shade($color, $percentage) {
  @return mix($color, black, $percentage);
}

/// Converts pixels to relative values (em).
/// @access public
/// @param {number|string} $pixels - The pixel value to be converted.
/// @param {number|string} $context [$browser-context] - The base context to convert against.
@function em($pixels, $context: $browser-context) {
  @if (unitless($pixels)) {
      $pixels: $pixels * 1px;
  }
  @if (unitless($context)) {
      $context: $context * 1px;
  }
  @return ($pixels / $context) * 1em;
}

/// Pixels to root relative values (rem).
/// @access public
/// @param {number|string} $pixels - The pixel value to be converted.
/// @param {number|string} $context [$browser-context] - The base context to convert against.
@function rem($pixels, $context: $browser-context) {
  @if (unitless($pixels)) {
      $pixels: $pixels * 1px;
  }
  @if (unitless($context)) {
      $context: $context * 1px;
  }
  @return ($pixels / $context) * 1rem;
}
