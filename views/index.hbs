<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>Ignite UI for Angular | Sass Documentation</title>
        <link rel="stylesheet" href="https://use.typekit.net/zhy2hpz.css">
        <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
        <link rel="stylesheet" href="https://infragistics.com/css/navigation.css">
        <link rel="stylesheet" href="https://infragistics.com/css/footer.css">
        <link rel="stylesheet" href="assets/css/main.css" />
    </head>

    <body>
        {{> header}}
    {{!
     ! You can access any variable you set in your configuration file from the `view` object.
     ! Basically your configuration file is passed to the view as the `view` object.
     }}

    {{!
     ! Data comes with a `byGroupAndType` key which contains the data tree
     ! with groups as first level (default group is named `undefined`),
     ! types as second level (`function`, `variable` or `mixin`), items as third level.
     ! So: `groups > types > items`.
     !
        _data.byGroupAndType = {
            'undefined': {
                'function': [ ... ],
                'mixin': [ ... ],
                'variable': [ ... ],
            },
        }
     !
     ! For extra informations about the `data` interface, be sure to have a look at the wiki:
     ! https://github.com/SassDoc/sassdoc/wiki/SassDoc-Data-Interface
     }}

    {{!
     ! Groups usually have quite unfriendly names, hence `undefined`. Fortunately, they can be aliased
     ! from the configuration file of the theme. Then, SassDoc processes it to generate a `groups` object.
     ! In this object, each group name is mapped to either an alias if specified in the configuration file
     ! or the same group name. For instance:
     !
        groups = {
            'undefined': 'My Awesome Default Group',
        }
     !
     ! To retrieve the alias of a group, use `groups[group_name]`. In this case, `groups['undefined']` will
     ! return `My Awesome Default Group`.
     }}

    {{!
     ! To display our items, we need to:
     ! 1. Loop over `_data.byGroupAndType` groups
     ! 2. Loop over types mapped to each group
     ! 3. Loop over items mapped to each type
     }}

    <main class="main-content" role="main">
        <div class="nav-wrapper">
            <div class="search-form">
                <div class="search-form__input-container">
                    <label for="search-docs" class="material-icons search-form__input-icon">search</label>
                    <input id="search-docs" class="search-form__input" data-toggles="search-form__results" placeholder="Search" type="text">
                </div>
                <div id="search-results" class="search-form__results search-form__results--hidden"></div>
            </div>
            <nav class="nav-wrapper__nav" role="navigation">
                {{! 1. Loop over the groups in `_data.byGroupAndType` }}
                {{#each _data.byGroupAndType}}
                    <ul class="nav-group">
                        {{! Retrieve group alias if any (else group name) }}
                        <li class="nav-group__header nav-group__header--collapsed" data-toggles="{{@key}}-group">
                            <h1>{{@key}}</h1>
                        </li>

                        {{! 2. Loop over the types in the current group }}
                        {{#each this}}
                        {{! If items to be displayed in type }}
                            {{#with this}}
                                <ul class="subnav subnav--collapsed {{@../key}}-group">
                                    {{! 3. Loop over the items in the current type }}
                                    {{#each this}}
                                        <li class="subnav__item">
                                            {{! At this point it is up to you to display whatever you want from your items. }}
                                            <a href="#{{context.type}}-{{context.name}}">
                                                <!-- TODO Make the type dynamic based on function, mixin and var -->
                                                <span>
                                                    <span class="subnav__item-type{{typeClass context.type}}">{{trimType context.type}}</span>
                                                </span>
                                                <span>{{context.name}}</span>
                                            </a>
                                        </li>
                                    {{/each}}
                                </ul>
                            {{/with}}

                        {{/each}}
                    </ul>
                {{/each}}
            </nav>
        </div>

        <aside class="main-wrapper">
            {{#each _data.byGroupAndType}}
                <section class="main-wrapper__section">
                    <h1 class="main-wrapper__section-title">{{@key}}</h1>
                    {{#each this}}
                        {{#with this}}
                            {{#each this}}
                                <article class="main-wrapper__section-article" id="{{context.type}}-{{context.name}}">
                                    {{> definitionHeader}}
                                    {{> description}}
                                    {{> github}}
                                    {{!-- {{~>source~}} --}}
                                    {{~>example~}}
                                    {{> parameters}}
                                    {{> usedBy}}
                                    {{> require}}
                                    {{> authors}}
                                </article>
                            {{/each}}
                        {{/with}}
                    {{/each}}
                </section>
            {{/each}}
        </aside>

    </main>

    {{> infraFoot}}
    {{!
     ! If your theme needs some JavaScript, feel free to create a JS file in `assets/js/` folder
     ! and include it as follow:
     !
     !
     }}
    <script src="assets/js/vendor/highlight.pack.js"></script>
    <script src="https://unpkg.com/lunr/lunr.js"></script>
    <script>window.sassdocIndex = {{{json idx}}}</script>
    <script src="assets/js/main.js"></script>
    <script src="https://code.jquery.com/jquery-2.2.4.min.js" integrity="sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=" crossorigin="anonymous"></script>
    <script type="text/javascript" src="https://infragistics.com/assets/modern/scripts/jquery-migrate.min.js"></script>
    <script type="text/javascript" src="https://infragistics.com/assets/modern/scripts/plugins.nav.js"></script>
    <script type="text/javascript" src="https://infragistics.com/assets/modern/scripts/navigation.js"></script>
    </body>
</html>
